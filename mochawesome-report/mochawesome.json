{
  "stats": {
    "suites": 5,
    "tests": 9,
    "passes": 1,
    "pending": 0,
    "failures": 8,
    "start": "2023-02-09T03:06:43.342Z",
    "end": "2023-02-09T03:07:01.528Z",
    "duration": 18186,
    "testsRegistered": 9,
    "passPercent": 11.11111111111111,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d2a3dff5-acff-41a4-bed4-7b10fc8a76ce",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c7b94a20-8e76-454d-8297-b1303b53ac74",
          "title": "Auth",
          "fullFile": "D:\\testing2\\API-Testing\\tests\\scenario\\auth.test.js",
          "file": "\\tests\\scenario\\auth.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should succesful authentication with valid data",
              "fullTitle": "Auth Should succesful authentication with valid data",
              "timedOut": true,
              "duration": 2091,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.auth(data.VALID_AUTHENTICATION);          \n\nassert.equal(response.status, 200);\nassert.isString(response.data.token);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\testing2\\API-Testing\\tests\\scenario\\auth.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\testing2\\API-Testing\\tests\\scenario\\auth.test.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                "diff": null
              },
              "uuid": "2abd679a-560a-43b4-9bc4-13778ba3f55d",
              "parentUUID": "c7b94a20-8e76-454d-8297-b1303b53ac74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not succesful authentication with invalid data",
              "fullTitle": "Auth Should not succesful authentication with invalid data",
              "timedOut": true,
              "duration": 2012,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.auth(data.INVALID_AUTHENTICATION);          \n\nassert.equal(response.status, 200);\nassert.isString(response.data.reason)",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\testing2\\API-Testing\\tests\\scenario\\auth.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\testing2\\API-Testing\\tests\\scenario\\auth.test.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                "diff": null
              },
              "uuid": "4a0b3e7f-7c43-426f-b25e-fa715fe415bf",
              "parentUUID": "c7b94a20-8e76-454d-8297-b1303b53ac74",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "2abd679a-560a-43b4-9bc4-13778ba3f55d",
            "4a0b3e7f-7c43-426f-b25e-fa715fe415bf"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4103,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bd4b4761-0932-4334-859c-a9e296a55faf",
          "title": "Createbooking",
          "fullFile": "D:\\testing2\\API-Testing\\tests\\scenario\\create.booking.js",
          "file": "\\tests\\scenario\\create.booking.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should succesful create booking",
              "fullTitle": "Createbooking Should succesful create booking",
              "timedOut": true,
              "duration": 2014,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.createbooking(data.CREATE_BOOKING);          \nconsole.log(response.data)\nid_data = response.data.bookingid\nassert.equal(response.status, 200);\nassert.isNumber(response.data.bookingid);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\testing2\\API-Testing\\tests\\scenario\\create.booking.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\testing2\\API-Testing\\tests\\scenario\\create.booking.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                "diff": null
              },
              "uuid": "aaebd6e3-ec68-480f-8f1f-c363dd0f716c",
              "parentUUID": "bd4b4761-0932-4334-859c-a9e296a55faf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "aaebd6e3-ec68-480f-8f1f-c363dd0f716c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2014,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8dce0ca8-b163-4d2a-a279-746a7987d74e",
          "title": "GetAllIdBooking",
          "fullFile": "D:\\testing2\\API-Testing\\tests\\scenario\\get.all-id.booking.js",
          "file": "\\tests\\scenario\\get.all-id.booking.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should succesful authentication",
              "fullTitle": "GetAllIdBooking Should succesful authentication",
              "timedOut": true,
              "duration": 2017,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.getallid();          \nconsole.log(response.data)\nassert.equal(response.status, 200);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\testing2\\API-Testing\\tests\\scenario\\get.all-id.booking.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\testing2\\API-Testing\\tests\\scenario\\get.all-id.booking.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                "diff": null
              },
              "uuid": "c64615bf-96f9-4ace-8280-86101559766a",
              "parentUUID": "8dce0ca8-b163-4d2a-a279-746a7987d74e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "c64615bf-96f9-4ace-8280-86101559766a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2017,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "11d45260-d030-4ef6-a3dd-bbd384fe35f4",
          "title": "getbooking",
          "fullFile": "D:\\testing2\\API-Testing\\tests\\scenario\\get.booking.js",
          "file": "\\tests\\scenario\\get.booking.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should succesfully get list users",
              "fullTitle": "getbooking Should succesfully get list users",
              "timedOut": true,
              "duration": 2016,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const param1 = data.userParam['firstname'];\nconst param2 = data.userParam['lastname'];\nconst response = await restfulApi.getbookinguser(param1,param2);\nconsole.log(response.data)\nconsole.log(param1,param2)\nassert.equal(response.status, 200);\n// expect(response.data).to.be.jsonSchema(schema.VALID_PARAMS);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\testing2\\API-Testing\\tests\\scenario\\get.booking.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\testing2\\API-Testing\\tests\\scenario\\get.booking.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                "diff": null
              },
              "uuid": "22c94aa9-931d-49ea-9bdb-82a72017440d",
              "parentUUID": "11d45260-d030-4ef6-a3dd-bbd384fe35f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should succesfully get list users by ID",
              "fullTitle": "getbooking Should succesfully get list users by ID",
              "timedOut": true,
              "duration": 2011,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const param = getParams(await idBooking());\nconsole.log(param)\nconsole.log(\"parameter\")\n// const param = getParams(data.VALID_ID['id']);\nconst response = await restfulApi.getbooking(param);\nconsole.log(response.data)\nassert.equal(response.status, 200);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\testing2\\API-Testing\\tests\\scenario\\get.booking.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\testing2\\API-Testing\\tests\\scenario\\get.booking.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                "diff": null
              },
              "uuid": "a038af3e-6738-4bc7-b519-9a5318c81a7c",
              "parentUUID": "11d45260-d030-4ef6-a3dd-bbd384fe35f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should unsuccesfully get list users",
              "fullTitle": "getbooking Should unsuccesfully get list users",
              "timedOut": false,
              "duration": 1951,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const param = getParams(data.INVALID_ID['id']);\nconst response = await restfulApi.getbooking(param);\nconsole.log(response.data)\nassert.equal(response.status, 404);",
              "err": {},
              "uuid": "c756f4c2-f31d-4fbd-a183-5f09976df43f",
              "parentUUID": "11d45260-d030-4ef6-a3dd-bbd384fe35f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully filter by checkin and Checkout",
              "fullTitle": "getbooking Successfully filter by checkin and Checkout",
              "timedOut": true,
              "duration": 2007,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const param3 = data.userDate['checkin'];\nconst param4 = data.userDate['checkout'];\nconst response = await restfulApi.getbookingdate(param3,param4)\nconsole.log(response.data)\nassert.equal(response.status, 200);\n// expect(response.data).to.be.jsonSchema(schema.VALID_PARAMS);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\testing2\\API-Testing\\tests\\scenario\\get.booking.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\testing2\\API-Testing\\tests\\scenario\\get.booking.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                "diff": null
              },
              "uuid": "020f5dc0-13ea-4ea8-840d-55b1f3ab077b",
              "parentUUID": "11d45260-d030-4ef6-a3dd-bbd384fe35f4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c756f4c2-f31d-4fbd-a183-5f09976df43f"
          ],
          "failures": [
            "22c94aa9-931d-49ea-9bdb-82a72017440d",
            "a038af3e-6738-4bc7-b519-9a5318c81a7c",
            "020f5dc0-13ea-4ea8-840d-55b1f3ab077b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 7985,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fe30f65f-04b4-4b81-82aa-f02a70b23190",
          "title": "Healthcheck",
          "fullFile": "D:\\testing2\\API-Testing\\tests\\scenario\\health.check.js",
          "file": "\\tests\\scenario\\health.check.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should succesful authentication",
              "fullTitle": "Healthcheck Should succesful authentication",
              "timedOut": true,
              "duration": 2014,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.healthcheck();          \n\nassert.equal(response.status, 201);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\testing2\\API-Testing\\tests\\scenario\\health.check.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\testing2\\API-Testing\\tests\\scenario\\health.check.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                "diff": null
              },
              "uuid": "b316bd90-05a5-47f0-9c54-0f4fb989f535",
              "parentUUID": "fe30f65f-04b4-4b81-82aa-f02a70b23190",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b316bd90-05a5-47f0-9c54-0f4fb989f535"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2014,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}