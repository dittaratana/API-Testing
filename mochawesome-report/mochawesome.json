{
  "stats": {
    "suites": 2,
    "tests": 6,
    "passes": 5,
    "pending": 0,
    "failures": 1,
    "start": "2023-02-11T10:05:20.499Z",
    "end": "2023-02-11T10:05:28.041Z",
    "duration": 7542,
    "testsRegistered": 6,
    "passPercent": 83.33333333333334,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "17b74b01-7200-43c8-9c94-3bb8858aedf4",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "eb4ab5ea-0e82-4aa5-8e93-b03cc07b8b77",
          "title": "Authentication",
          "fullFile": "D:\\testing2\\API-Testing\\tests\\scenario\\data.test.js",
          "file": "\\tests\\scenario\\data.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should succesful authentication with valid data",
              "fullTitle": "Authentication Should succesful authentication with valid data",
              "timedOut": false,
              "duration": 1411,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.auth(data.validAuthentication);          \n\nauthToken = response.data.token;\nassert.equal(response.status, 200);\nassert.equal(authToken.length, data.validToken.token.length)\nassert.isString(response.data.token, 200);\nexpect(response.data).to.be.jsonSchema(schema.VALID_AUTH)",
              "err": {},
              "uuid": "987277c1-d8b1-4122-8130-cfd7f06f1c74",
              "parentUUID": "eb4ab5ea-0e82-4aa5-8e93-b03cc07b8b77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should succesful authentication with invalid data",
              "fullTitle": "Authentication Should succesful authentication with invalid data",
              "timedOut": false,
              "duration": 978,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.auth(data.invalidAuthentication);          \n\n\nassert.equal(response.status, 200);\nassert.equal(response.data.reason, data.invalidResponse.reason)\nexpect(response.data).to.be.jsonSchema(schema.INVALID_AUTH)",
              "err": {},
              "uuid": "4bb4dd20-40be-4e04-8212-5cadc1a509c8",
              "parentUUID": "eb4ab5ea-0e82-4aa5-8e93-b03cc07b8b77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should succesful authentication with invalid data with empty username",
              "fullTitle": "Authentication Should succesful authentication with invalid data with empty username",
              "timedOut": false,
              "duration": 977,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.auth(data.InvalidAuthenticationEmptyUsername);          \n\n\nassert.equal(response.status, 200);\nassert.equal(response.data.reason, data.invalidResponse.reason)\nassert.isString(response.data.reason)\nexpect(response.data).to.be.jsonSchema(schema.INVALID_AUTH)",
              "err": {},
              "uuid": "ef14f447-ee59-4c28-8d79-76d0c7e23c98",
              "parentUUID": "eb4ab5ea-0e82-4aa5-8e93-b03cc07b8b77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should succesful authentication with invalid data with empty Password",
              "fullTitle": "Authentication Should succesful authentication with invalid data with empty Password",
              "timedOut": false,
              "duration": 979,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.auth(data.InvalidAuthenticationEmptyPassword);          \n\n\nassert.equal(response.status, 200);\nassert.equal(response.data.reason, data.invalidResponse.reason)\nassert.isString(response.data.reason)\nexpect(response.data).to.be.jsonSchema(schema.INVALID_AUTH)",
              "err": {},
              "uuid": "2dc364a1-588e-4341-84df-3ebc85137ab8",
              "parentUUID": "eb4ab5ea-0e82-4aa5-8e93-b03cc07b8b77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should succesful authentication with invalid data with both empty",
              "fullTitle": "Authentication Should succesful authentication with invalid data with both empty",
              "timedOut": false,
              "duration": 1168,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.auth(data.InvalidEmpty);          \n\n\nassert.equal(response.status, 200);\nassert.equal(response.data.reason, data.invalidResponse.reason)\nassert.isString(response.data.reason)\nexpect(response.data).to.be.jsonSchema(schema.INVALID_AUTH)",
              "err": {},
              "uuid": "64190fa9-dfec-4443-8f46-74065e18588f",
              "parentUUID": "eb4ab5ea-0e82-4aa5-8e93-b03cc07b8b77",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "987277c1-d8b1-4122-8130-cfd7f06f1c74",
            "4bb4dd20-40be-4e04-8212-5cadc1a509c8",
            "ef14f447-ee59-4c28-8d79-76d0c7e23c98",
            "2dc364a1-588e-4341-84df-3ebc85137ab8",
            "64190fa9-dfec-4443-8f46-74065e18588f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5513,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fa3c7e50-697e-4625-bee8-8e5b2572897c",
          "title": "Create Booking",
          "fullFile": "D:\\testing2\\API-Testing\\tests\\scenario\\data.test.js",
          "file": "\\tests\\scenario\\data.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should succesful create booking",
              "fullTitle": "Create Booking Should succesful create booking",
              "timedOut": true,
              "duration": 2013,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.createBooking(data.CREATE_BOOKING); \n// console.log(response.data)\nbookingId = response.data.bookingid\nassert.equal(response.status, 200);\nexpect(response.data).to.be.jsonSchema(schema.VALID_PARAMS)",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\testing2\\API-Testing\\tests\\scenario\\data.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\testing2\\API-Testing\\tests\\scenario\\data.test.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                "diff": null
              },
              "uuid": "322f0e91-d330-4e5e-8ffd-3cc9bb81dfdc",
              "parentUUID": "fa3c7e50-697e-4625-bee8-8e5b2572897c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "322f0e91-d330-4e5e-8ffd-3cc9bb81dfdc"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2013,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}