{
  "stats": {
    "suites": 2,
    "tests": 7,
    "passes": 5,
    "pending": 0,
    "failures": 2,
    "start": "2023-02-11T12:16:38.800Z",
    "end": "2023-02-11T12:16:48.766Z",
    "duration": 9966,
    "testsRegistered": 7,
    "passPercent": 71.42857142857143,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "36e75a0d-9433-4e92-836a-5dfc9742a130",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6ea74a89-9263-4ac1-bc8b-ab6435d604ab",
          "title": "Authentication",
          "fullFile": "D:\\testing2\\API-Testing\\tests\\scenario\\data.test.js",
          "file": "\\tests\\scenario\\data.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should succesful authentication with valid data",
              "fullTitle": "Authentication Should succesful authentication with valid data",
              "timedOut": false,
              "duration": 1623,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.auth(data.validAuthentication);          \n\nauthToken = response.data.token;\nassert.equal(response.status, 200);\nassert.equal(authToken.length, data.validToken.token.length)\nassert.isString(response.data.token, 200);\nexpect(response.data).to.be.jsonSchema(schema.VALID_AUTH)",
              "err": {},
              "uuid": "6aaa2685-4d14-4255-8c37-e1958d6c2104",
              "parentUUID": "6ea74a89-9263-4ac1-bc8b-ab6435d604ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should succesful authentication with invalid data",
              "fullTitle": "Authentication Should succesful authentication with invalid data",
              "timedOut": false,
              "duration": 1116,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.auth(data.invalidAuthentication);          \n\n\nassert.equal(response.status, 200);\nassert.equal(response.data.reason, data.invalidResponse.reason)\nexpect(response.data).to.be.jsonSchema(schema.INVALID_AUTH)",
              "err": {},
              "uuid": "9f425fb5-e5d3-4d1f-b0a2-333aa66e8f7e",
              "parentUUID": "6ea74a89-9263-4ac1-bc8b-ab6435d604ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should succesful authentication with invalid data with empty username",
              "fullTitle": "Authentication Should succesful authentication with invalid data with empty username",
              "timedOut": false,
              "duration": 1109,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.auth(data.InvalidAuthenticationEmptyUsername);          \n\n\nassert.equal(response.status, 200);\nassert.equal(response.data.reason, data.invalidResponse.reason)\nassert.isString(response.data.reason)\nexpect(response.data).to.be.jsonSchema(schema.INVALID_AUTH)",
              "err": {},
              "uuid": "88129abd-f3da-4e63-9ddb-4483ff457245",
              "parentUUID": "6ea74a89-9263-4ac1-bc8b-ab6435d604ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should succesful authentication with invalid data with empty Password",
              "fullTitle": "Authentication Should succesful authentication with invalid data with empty Password",
              "timedOut": false,
              "duration": 969,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.auth(data.InvalidAuthenticationEmptyPassword);          \n\n\nassert.equal(response.status, 200);\nassert.equal(response.data.reason, data.invalidResponse.reason)\nassert.isString(response.data.reason)\nexpect(response.data).to.be.jsonSchema(schema.INVALID_AUTH)",
              "err": {},
              "uuid": "98bdec35-f892-44aa-87a2-6ad22fc27e9b",
              "parentUUID": "6ea74a89-9263-4ac1-bc8b-ab6435d604ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should succesful authentication with invalid data with both empty",
              "fullTitle": "Authentication Should succesful authentication with invalid data with both empty",
              "timedOut": false,
              "duration": 1111,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.auth(data.InvalidEmpty);          \n\n\nassert.equal(response.status, 200);\nassert.equal(response.data.reason, data.invalidResponse.reason)\nassert.isString(response.data.reason)\nexpect(response.data).to.be.jsonSchema(schema.INVALID_AUTH)",
              "err": {},
              "uuid": "def5e55f-f571-44f2-bed6-6a3527e1ae50",
              "parentUUID": "6ea74a89-9263-4ac1-bc8b-ab6435d604ab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6aaa2685-4d14-4255-8c37-e1958d6c2104",
            "9f425fb5-e5d3-4d1f-b0a2-333aa66e8f7e",
            "88129abd-f3da-4e63-9ddb-4483ff457245",
            "98bdec35-f892-44aa-87a2-6ad22fc27e9b",
            "def5e55f-f571-44f2-bed6-6a3527e1ae50"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5928,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bb010f53-b6b6-4fc1-8cf6-1166b9d981aa",
          "title": "Create Booking",
          "fullFile": "D:\\testing2\\API-Testing\\tests\\scenario\\data.test.js",
          "file": "\\tests\\scenario\\data.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should succesful create booking",
              "fullTitle": "Create Booking Should succesful create booking",
              "timedOut": true,
              "duration": 2012,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.createBooking(data.CREATE_BOOKING); \n// console.log(response.data)\nbookingId = response.data.bookingid\nassert.equal(response.status, 200);\nexpect(response.data).to.be.jsonSchema(schema.VALID_PARAMS)",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\testing2\\API-Testing\\tests\\scenario\\data.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\testing2\\API-Testing\\tests\\scenario\\data.test.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                "diff": null
              },
              "uuid": "174b7f13-f739-482e-9b9b-923e45478ebf",
              "parentUUID": "bb010f53-b6b6-4fc1-8cf6-1166b9d981aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get Booking with ID",
              "fullTitle": "Create Booking Get Booking with ID",
              "timedOut": true,
              "duration": 2006,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.getBookingById(data.bookingId);\n// console.log(response.data)\nassert.equal(response.status, 200);\nexpect(response.data).to.be.jsonSchema(schema.VALID_PARAMS);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\testing2\\API-Testing\\tests\\scenario\\data.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\testing2\\API-Testing\\tests\\scenario\\data.test.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                "diff": null
              },
              "uuid": "1ddcb67d-6c08-453a-b7ef-c77eaa12559b",
              "parentUUID": "bb010f53-b6b6-4fc1-8cf6-1166b9d981aa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "174b7f13-f739-482e-9b9b-923e45478ebf",
            "1ddcb67d-6c08-453a-b7ef-c77eaa12559b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4018,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}