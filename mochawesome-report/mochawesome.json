{
  "stats": {
    "suites": 5,
    "tests": 9,
    "passes": 8,
    "pending": 0,
    "failures": 1,
    "start": "2023-02-09T12:29:47.983Z",
    "end": "2023-02-09T12:29:59.047Z",
    "duration": 11064,
    "testsRegistered": 9,
    "passPercent": 88.88888888888889,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2d6026d7-8106-4430-abfc-8a663799a58b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ec11da9c-fbab-439c-b00d-1bc6bac1ce6b",
          "title": "Auth",
          "fullFile": "D:\\testing2\\API-Testing\\tests\\scenario\\auth.test.js",
          "file": "\\tests\\scenario\\auth.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should succesful authentication with valid data",
              "fullTitle": "Auth Should succesful authentication with valid data",
              "timedOut": false,
              "duration": 1515,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.auth(data.VALID_AUTHENTICATION);          \n\nassert.equal(response.status, 200);\nassert.isString(response.data.token);",
              "err": {},
              "uuid": "0650b289-4287-4c11-bf4a-8d9b4e0fdb90",
              "parentUUID": "ec11da9c-fbab-439c-b00d-1bc6bac1ce6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not succesful authentication with invalid data",
              "fullTitle": "Auth Should not succesful authentication with invalid data",
              "timedOut": false,
              "duration": 978,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.auth(data.INVALID_AUTHENTICATION);          \n\nassert.equal(response.status, 200);\nassert.isString(response.data.reason)",
              "err": {},
              "uuid": "90432a25-05fd-4369-9718-866d1cee2919",
              "parentUUID": "ec11da9c-fbab-439c-b00d-1bc6bac1ce6b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0650b289-4287-4c11-bf4a-8d9b4e0fdb90",
            "90432a25-05fd-4369-9718-866d1cee2919"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2493,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d751bcba-f128-496d-b07e-edd2d541d8dc",
          "title": "Createbooking",
          "fullFile": "D:\\testing2\\API-Testing\\tests\\scenario\\create.booking.js",
          "file": "\\tests\\scenario\\create.booking.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should succesful create booking",
              "fullTitle": "Createbooking Should succesful create booking",
              "timedOut": false,
              "duration": 971,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.createbooking(data.CREATE_BOOKING);          \nconsole.log(response.data)\nid_data = response.data.bookingid\nassert.equal(response.status, 200);\nassert.isNumber(response.data.bookingid);",
              "err": {},
              "uuid": "ad3fc2e7-cde5-4108-af3b-ba6e3f39d17b",
              "parentUUID": "d751bcba-f128-496d-b07e-edd2d541d8dc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ad3fc2e7-cde5-4108-af3b-ba6e3f39d17b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 971,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "84c72fd8-7e94-4d84-8085-6f1928c36a6d",
          "title": "GetAllIdBooking",
          "fullFile": "D:\\testing2\\API-Testing\\tests\\scenario\\get.all-id.booking.js",
          "file": "\\tests\\scenario\\get.all-id.booking.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should succesful authentication",
              "fullTitle": "GetAllIdBooking Should succesful authentication",
              "timedOut": true,
              "duration": 2014,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.getallid();          \nconsole.log(response.data)\nassert.equal(response.status, 200);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\testing2\\API-Testing\\tests\\scenario\\get.all-id.booking.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\testing2\\API-Testing\\tests\\scenario\\get.all-id.booking.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                "diff": null
              },
              "uuid": "a97a180c-3594-4d3f-a56c-6b9c6c911ffd",
              "parentUUID": "84c72fd8-7e94-4d84-8085-6f1928c36a6d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a97a180c-3594-4d3f-a56c-6b9c6c911ffd"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2014,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "30ba1625-9c9e-48f6-a67c-1b5a76e67e7f",
          "title": "getbooking",
          "fullFile": "D:\\testing2\\API-Testing\\tests\\scenario\\get.booking.js",
          "file": "\\tests\\scenario\\get.booking.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should succesfully get list users",
              "fullTitle": "getbooking Should succesfully get list users",
              "timedOut": false,
              "duration": 994,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const param1 = data.userParam['firstname'];\nconst param2 = data.userParam['lastname'];\nconst response = await restfulApi.getbookinguser(param1,param2);\nconsole.log(response.data)\nconsole.log(param1,param2)\nassert.equal(response.status, 200);\n// expect(response.data).to.be.jsonSchema(schema.VALID_PARAMS);",
              "err": {},
              "uuid": "6fbe81d1-cee8-4e86-bbb8-be573b89c92b",
              "parentUUID": "30ba1625-9c9e-48f6-a67c-1b5a76e67e7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should succesfully get list users by ID",
              "fullTitle": "getbooking Should succesfully get list users by ID",
              "timedOut": false,
              "duration": 1010,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const param = getParams(await idBooking());\nconsole.log(param)\n// console.log(\"parameter\")\n// const param = getParams(data.VALID_ID['id']);\nconst response = await restfulApi.getbooking(param);\nconsole.log(response.data)\nassert.equal(response.status, 200);",
              "err": {},
              "uuid": "7a320c7c-9922-4633-bfbb-3c4959fbc59a",
              "parentUUID": "30ba1625-9c9e-48f6-a67c-1b5a76e67e7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should unsuccesfully get list users",
              "fullTitle": "getbooking Should unsuccesfully get list users",
              "timedOut": false,
              "duration": 1008,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const param = getParams(data.INVALID_ID['id']);\nconst response = await restfulApi.getbooking(param);\nconsole.log(response.data)\nassert.equal(response.status, 404);",
              "err": {},
              "uuid": "331b9280-085f-4cb9-9684-89738576b57d",
              "parentUUID": "30ba1625-9c9e-48f6-a67c-1b5a76e67e7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully filter by checkin and Checkout",
              "fullTitle": "getbooking Successfully filter by checkin and Checkout",
              "timedOut": false,
              "duration": 1172,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const param3 = data.userDate['checkin'];\nconst param4 = data.userDate['checkout'];\nconst response = await restfulApi.getbookingdate(param3,param4)\nconsole.log(response.data)\nassert.equal(response.status, 200);\n// expect(response.data).to.be.jsonSchema(schema.VALID_PARAMS);",
              "err": {},
              "uuid": "2a3872e0-98e6-45bc-9c0f-ab0ca07cf0c5",
              "parentUUID": "30ba1625-9c9e-48f6-a67c-1b5a76e67e7f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6fbe81d1-cee8-4e86-bbb8-be573b89c92b",
            "7a320c7c-9922-4633-bfbb-3c4959fbc59a",
            "331b9280-085f-4cb9-9684-89738576b57d",
            "2a3872e0-98e6-45bc-9c0f-ab0ca07cf0c5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4184,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "baaa9830-396b-4314-b422-e25969bddaed",
          "title": "Healthcheck",
          "fullFile": "D:\\testing2\\API-Testing\\tests\\scenario\\health.check.js",
          "file": "\\tests\\scenario\\health.check.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should succesful authentication",
              "fullTitle": "Healthcheck Should succesful authentication",
              "timedOut": false,
              "duration": 1364,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.healthcheck();          \n\nassert.equal(response.status, 201);",
              "err": {},
              "uuid": "fa3bf197-a281-4b1b-88fd-3907fddf1d91",
              "parentUUID": "baaa9830-396b-4314-b422-e25969bddaed",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fa3bf197-a281-4b1b-88fd-3907fddf1d91"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1364,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}