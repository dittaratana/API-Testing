{
  "stats": {
    "suites": 3,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2023-02-12T16:34:24.718Z",
    "end": "2023-02-12T16:34:40.717Z",
    "duration": 15999,
    "testsRegistered": 12,
    "passPercent": 75,
    "pendingPercent": 0,
    "other": 1,
    "hasOther": true,
    "skipped": 3,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "1ac219e4-ec7a-4445-91d7-327415e5a77f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "817535d8-98ae-489f-9829-ae89bfef2ca8",
          "title": "Authentication",
          "fullFile": "D:\\testing2\\API-Testing\\tests\\scenario\\data.test.js",
          "file": "\\tests\\scenario\\data.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should succesful authentication with valid data",
              "fullTitle": "Authentication Should succesful authentication with valid data",
              "timedOut": false,
              "duration": 1411,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.auth(data.validAuthentication);          \n\nauthToken = response.data.token;\nassert.equal(response.status, 200);\nassert.equal(authToken.length, data.validToken.token.length)\nassert.isString(response.data.token, 200);\nexpect(response.data).to.be.jsonSchema(schema.VALID_AUTH)",
              "err": {},
              "uuid": "7d53068d-8ba7-4f52-bfcc-f5449157c4ca",
              "parentUUID": "817535d8-98ae-489f-9829-ae89bfef2ca8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should succesful authentication with invalid data",
              "fullTitle": "Authentication Should succesful authentication with invalid data",
              "timedOut": false,
              "duration": 968,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.auth(data.invalidAuthentication);          \n\n\nassert.equal(response.status, 200);\nassert.equal(response.data.reason, data.invalidResponse.reason)\nexpect(response.data).to.be.jsonSchema(schema.INVALID_AUTH)",
              "err": {},
              "uuid": "ae281029-4686-4a75-b7b2-f912029df4ed",
              "parentUUID": "817535d8-98ae-489f-9829-ae89bfef2ca8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should succesful authentication with invalid data with empty username",
              "fullTitle": "Authentication Should succesful authentication with invalid data with empty username",
              "timedOut": false,
              "duration": 969,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.auth(data.InvalidAuthenticationEmptyUsername);          \n\n\nassert.equal(response.status, 200);\nassert.equal(response.data.reason, data.invalidResponse.reason)\nassert.isString(response.data.reason)\nexpect(response.data).to.be.jsonSchema(schema.INVALID_AUTH)",
              "err": {},
              "uuid": "b6a59f6b-d456-4363-bc6f-71aa75454265",
              "parentUUID": "817535d8-98ae-489f-9829-ae89bfef2ca8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should succesful authentication with invalid data with empty Password",
              "fullTitle": "Authentication Should succesful authentication with invalid data with empty Password",
              "timedOut": false,
              "duration": 1139,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.auth(data.InvalidAuthenticationEmptyPassword);          \n\n\nassert.equal(response.status, 200);\nassert.equal(response.data.reason, data.invalidResponse.reason)\nassert.isString(response.data.reason)\nexpect(response.data).to.be.jsonSchema(schema.INVALID_AUTH)",
              "err": {},
              "uuid": "079e6ad4-4aab-4415-a07d-5dbb013148e1",
              "parentUUID": "817535d8-98ae-489f-9829-ae89bfef2ca8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should succesful authentication with invalid data with both empty",
              "fullTitle": "Authentication Should succesful authentication with invalid data with both empty",
              "timedOut": false,
              "duration": 978,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.auth(data.InvalidEmpty);          \n\nassert.equal(response.status, 200);\nassert.equal(response.data.reason, data.invalidResponse.reason)\nassert.isString(response.data.reason)\nexpect(response.data).to.be.jsonSchema(schema.INVALID_AUTH)",
              "err": {},
              "uuid": "6ab83360-97b0-4260-8c90-daaebaee6d43",
              "parentUUID": "817535d8-98ae-489f-9829-ae89bfef2ca8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7d53068d-8ba7-4f52-bfcc-f5449157c4ca",
            "ae281029-4686-4a75-b7b2-f912029df4ed",
            "b6a59f6b-d456-4363-bc6f-71aa75454265",
            "079e6ad4-4aab-4415-a07d-5dbb013148e1",
            "6ab83360-97b0-4260-8c90-daaebaee6d43"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5465,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "41e16517-2b91-4f96-9fbd-9759f1e39799",
          "title": "Create Booking",
          "fullFile": "D:\\testing2\\API-Testing\\tests\\scenario\\data.test.js",
          "file": "\\tests\\scenario\\data.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should succesful create booking",
              "fullTitle": "Create Booking Should succesful create booking",
              "timedOut": false,
              "duration": 2095,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.createBooking(data.CREATE_BOOKING); \nconsole.log(response.data)\nbookingId = response.data.bookingid\nassert.equal(response.status, 200);\nexpect(response.data).to.be.jsonSchema(schema.VALID_PARAMS)",
              "err": {},
              "uuid": "20217f4a-9ddf-44b1-b4fa-f3950f0cd8cc",
              "parentUUID": "41e16517-2b91-4f96-9fbd-9759f1e39799",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get Booking with ID",
              "fullTitle": "Create Booking Get Booking with ID",
              "timedOut": false,
              "duration": 2100,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.getBookingById(bookingId);\nconsole.log(response.data)\nassert.equal(response.status, 200);\nexpect(response.data).to.be.jsonSchema(schema.ValidParamsId);",
              "err": {},
              "uuid": "ed3f5a46-9e6b-41fd-a1da-24a5870c8f0f",
              "parentUUID": "41e16517-2b91-4f96-9fbd-9759f1e39799",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get Booking with false ID ",
              "fullTitle": "Create Booking Get Booking with false ID ",
              "timedOut": false,
              "duration": 2342,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.getBookingById(1234567890);\nconsole.log(response.data)\nassert.equal(response.status, 404);",
              "err": {},
              "uuid": "b6d7e722-48cf-4adf-8c77-38f843ef2ce3",
              "parentUUID": "41e16517-2b91-4f96-9fbd-9759f1e39799",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get Booking with filter username and lastname",
              "fullTitle": "Create Booking Get Booking with filter username and lastname",
              "timedOut": false,
              "duration": 1991,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.getBookingByFilter(data.FilterName);\nconsole.log(response.data)\nassert.equal(response.status, 200)\nexpect(response.data).to.be.jsonSchema(schema.ValidFilterName)",
              "err": {},
              "uuid": "f4ab68ce-59c8-45ac-a4fb-de36a93ae272",
              "parentUUID": "41e16517-2b91-4f96-9fbd-9759f1e39799",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "20217f4a-9ddf-44b1-b4fa-f3950f0cd8cc",
            "ed3f5a46-9e6b-41fd-a1da-24a5870c8f0f",
            "b6d7e722-48cf-4adf-8c77-38f843ef2ce3",
            "f4ab68ce-59c8-45ac-a4fb-de36a93ae272"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8528,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "1100ff30-dbd7-486d-af35-5cc6b9140c90",
          "title": "Update Booking",
          "fullFile": "D:\\testing2\\API-Testing\\tests\\scenario\\data.test.js",
          "file": "\\tests\\scenario\\data.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"Should Succsefful Update Booking\"",
              "fullTitle": "Update Booking \"before all\" hook for \"Should Succsefful Update Booking\"",
              "timedOut": false,
              "duration": 1973,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.deleteBooking(bookingId);\n// console.log(response.data);\nassert.equal(response.status, 200)",
              "err": {
                "message": "AssertionError: expected 201 to equal 200",
                "estack": "AssertionError: expected 201 to equal 200\n    at Context.<anonymous> (file:///D:/testing2/API-Testing/tests/scenario/data.test.js:143:20)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": "- 201\n+ 200\n"
              },
              "uuid": "41f7e564-2729-42cb-9769-44ec7b48d677",
              "parentUUID": "1100ff30-dbd7-486d-af35-5cc6b9140c90",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should Succsefful Update Booking",
              "fullTitle": "Update Booking Should Succsefful Update Booking",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.updateBooking(bookingId,data.Update_Booking);\nconsole.log(response.data)\nassert.equal(response.status, 200)\nexpect(response.data).to.be.jsonSchema(schema.ValidParamsId)",
              "err": {},
              "uuid": "8c95e964-12da-46bf-ab7f-b748b52691e8",
              "parentUUID": "1100ff30-dbd7-486d-af35-5cc6b9140c90",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Should Succefful Update Booking without authentication",
              "fullTitle": "Update Booking Should Succefful Update Booking without authentication",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.updateBooking1(bookingId,data.Update_Booking);\nconsole.log(response.data)\nassert.equal(response.status, 403)\nassert.equal(response.data, \"Forbidden\")",
              "err": {},
              "uuid": "f00bb40d-bad0-4a0d-a747-7ac04d0ee810",
              "parentUUID": "1100ff30-dbd7-486d-af35-5cc6b9140c90",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Should Succefful Update Booking without ID",
              "fullTitle": "Update Booking Should Succefful Update Booking without ID",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.updateBooking(bookingId,data.Update_Booking);\nconsole.log(response.data)\nassert.equal(response.status, 405)\nexpect(response.data, \"Method Not Allowed\")",
              "err": {},
              "uuid": "a597755a-f153-4563-9d94-4f65089dcfdc",
              "parentUUID": "1100ff30-dbd7-486d-af35-5cc6b9140c90",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "8c95e964-12da-46bf-ab7f-b748b52691e8",
            "f00bb40d-bad0-4a0d-a747-7ac04d0ee810",
            "a597755a-f153-4563-9d94-4f65089dcfdc"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 15000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "report"
      },
      "version": "6.2.0"
    }
  }
}