{
  "stats": {
    "suites": 3,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2023-02-13T12:36:38.222Z",
    "end": "2023-02-13T12:36:50.839Z",
    "duration": 12617,
    "testsRegistered": 12,
    "passPercent": 75,
    "pendingPercent": 0,
    "other": 1,
    "hasOther": true,
    "skipped": 3,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "63730af9-6d83-4947-b88f-a8e8ac968512",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8c867fc4-a137-49c6-9b6f-c26d8424a4a2",
          "title": "Authentication",
          "fullFile": "D:\\testing2\\API-Testing\\tests\\scenario\\data.test.js",
          "file": "\\tests\\scenario\\data.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should succesful authentication with valid data",
              "fullTitle": "Authentication Should succesful authentication with valid data",
              "timedOut": false,
              "duration": 1266,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.auth(data.validAuthentication);          \n\nauthToken = response.data.token;\nassert.equal(response.status, 200);\nassert.equal(authToken.length, data.validToken.token.length)\nassert.isString(response.data.token, 200);\nexpect(response.data).to.be.jsonSchema(schema.VALID_AUTH)",
              "err": {},
              "uuid": "f25f8183-7774-4449-9f89-d4b3afca0ea9",
              "parentUUID": "8c867fc4-a137-49c6-9b6f-c26d8424a4a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should succesful authentication with invalid data",
              "fullTitle": "Authentication Should succesful authentication with invalid data",
              "timedOut": false,
              "duration": 839,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.auth(data.invalidAuthentication);          \n\n\nassert.equal(response.status, 200);\nassert.equal(response.data.reason, data.invalidResponse.reason)\nexpect(response.data).to.be.jsonSchema(schema.INVALID_AUTH)",
              "err": {},
              "uuid": "4f0bc30e-c91f-43fe-9fcf-3f940a57213f",
              "parentUUID": "8c867fc4-a137-49c6-9b6f-c26d8424a4a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should succesful authentication with invalid data with empty username",
              "fullTitle": "Authentication Should succesful authentication with invalid data with empty username",
              "timedOut": false,
              "duration": 798,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.auth(data.InvalidAuthenticationEmptyUsername);          \n\n\nassert.equal(response.status, 200);\nassert.equal(response.data.reason, data.invalidResponse.reason)\nassert.isString(response.data.reason)\nexpect(response.data).to.be.jsonSchema(schema.INVALID_AUTH)",
              "err": {},
              "uuid": "9660e5d8-8954-4ff6-86d0-450588a673fc",
              "parentUUID": "8c867fc4-a137-49c6-9b6f-c26d8424a4a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should succesful authentication with invalid data with empty Password",
              "fullTitle": "Authentication Should succesful authentication with invalid data with empty Password",
              "timedOut": false,
              "duration": 2171,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.auth(data.InvalidAuthenticationEmptyPassword);          \n\n\nassert.equal(response.status, 200);\nassert.equal(response.data.reason, data.invalidResponse.reason)\nassert.isString(response.data.reason)\nexpect(response.data).to.be.jsonSchema(schema.INVALID_AUTH)",
              "err": {},
              "uuid": "025b2640-a448-428a-a256-4ab7755252f0",
              "parentUUID": "8c867fc4-a137-49c6-9b6f-c26d8424a4a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should succesful authentication with invalid data with both empty",
              "fullTitle": "Authentication Should succesful authentication with invalid data with both empty",
              "timedOut": false,
              "duration": 809,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.auth(data.InvalidEmpty);          \n\nassert.equal(response.status, 200);\nassert.equal(response.data.reason, data.invalidResponse.reason)\nassert.isString(response.data.reason)\nexpect(response.data).to.be.jsonSchema(schema.INVALID_AUTH)",
              "err": {},
              "uuid": "fc29b8db-b4f8-4efd-8d4f-90d02be33786",
              "parentUUID": "8c867fc4-a137-49c6-9b6f-c26d8424a4a2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f25f8183-7774-4449-9f89-d4b3afca0ea9",
            "4f0bc30e-c91f-43fe-9fcf-3f940a57213f",
            "9660e5d8-8954-4ff6-86d0-450588a673fc",
            "025b2640-a448-428a-a256-4ab7755252f0",
            "fc29b8db-b4f8-4efd-8d4f-90d02be33786"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5883,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "17eb576a-5d8d-44c7-8c3a-a744f25e19d2",
          "title": "Create Booking",
          "fullFile": "D:\\testing2\\API-Testing\\tests\\scenario\\data.test.js",
          "file": "\\tests\\scenario\\data.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should succesful create booking",
              "fullTitle": "Create Booking Should succesful create booking",
              "timedOut": false,
              "duration": 1633,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.createBooking(data.CREATE_BOOKING); \nconsole.log(response.data)\nbookingId = response.data.bookingid\nassert.equal(response.status, 200);\nexpect(response.data).to.be.jsonSchema(schema.VALID_PARAMS)",
              "err": {},
              "uuid": "29dcde22-fe7d-4ca9-a0dd-aaf39254e3a0",
              "parentUUID": "17eb576a-5d8d-44c7-8c3a-a744f25e19d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get Booking with ID",
              "fullTitle": "Create Booking Get Booking with ID",
              "timedOut": false,
              "duration": 1711,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.getBookingById(bookingId);\nconsole.log(response.data)\nassert.equal(response.status, 200);\nexpect(response.data).to.be.jsonSchema(schema.ValidParamsId);",
              "err": {},
              "uuid": "d9671e2a-7ca0-4959-bbea-d6fe53158c6b",
              "parentUUID": "17eb576a-5d8d-44c7-8c3a-a744f25e19d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get Booking with false ID ",
              "fullTitle": "Create Booking Get Booking with false ID ",
              "timedOut": false,
              "duration": 1659,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.getBookingById(1234567890);\nconsole.log(response.data)\nassert.equal(response.status, 404);",
              "err": {},
              "uuid": "f1d9ab2a-5c29-4280-b9a1-a9a8daaa7019",
              "parentUUID": "17eb576a-5d8d-44c7-8c3a-a744f25e19d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get Booking with filter username and lastname",
              "fullTitle": "Create Booking Get Booking with filter username and lastname",
              "timedOut": false,
              "duration": 1692,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.getBookingByFilter1(data.FilterName);\nconsole.log(response.data)\nassert.equal(response.status, 200)\nexpect(response.data).to.be.jsonSchema(schema.ValidFilterName)",
              "err": {},
              "uuid": "b4e69416-5ce1-4131-ab41-7621edf157cf",
              "parentUUID": "17eb576a-5d8d-44c7-8c3a-a744f25e19d2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "29dcde22-fe7d-4ca9-a0dd-aaf39254e3a0",
            "d9671e2a-7ca0-4959-bbea-d6fe53158c6b",
            "f1d9ab2a-5c29-4280-b9a1-a9a8daaa7019",
            "b4e69416-5ce1-4131-ab41-7621edf157cf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6695,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "1de5e7eb-5e7d-47f0-8740-146d3e63ad4f",
          "title": "Update Booking",
          "fullFile": "D:\\testing2\\API-Testing\\tests\\scenario\\data.test.js",
          "file": "\\tests\\scenario\\data.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"Should Succsefful Update Booking\"",
              "fullTitle": "Update Booking \"before all\" hook for \"Should Succsefful Update Booking\"",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.deleteBooking(bookingId);\n// console.log(response.data);\nassert.equal(response.status, 200)",
              "err": {
                "message": "TypeError: restfulApi.deleteBooking is not a function",
                "estack": "TypeError: restfulApi.deleteBooking is not a function\n    at Context.<anonymous> (file:///D:/testing2/API-Testing/tests/scenario/data.test.js:141:47)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "5f1ee403-3df0-4c63-86a9-d834da2dfc87",
              "parentUUID": "1de5e7eb-5e7d-47f0-8740-146d3e63ad4f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should Succsefful Update Booking",
              "fullTitle": "Update Booking Should Succsefful Update Booking",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.updateBooking(bookingId,data.Update_Booking);\nconsole.log(response.data)\nassert.equal(response.status, 200)\nexpect(response.data).to.be.jsonSchema(schema.ValidParamsId)",
              "err": {},
              "uuid": "df6dd005-aba8-4959-818c-fdd8c2d404c3",
              "parentUUID": "1de5e7eb-5e7d-47f0-8740-146d3e63ad4f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Should Succefful Update Booking without authentication",
              "fullTitle": "Update Booking Should Succefful Update Booking without authentication",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.updateBooking1(bookingId,data.Update_Booking);\nconsole.log(response.data)\nassert.equal(response.status, 403)\nassert.equal(response.data, \"Forbidden\")",
              "err": {},
              "uuid": "c1da44f7-0267-4c3d-879e-be18eeda3b2e",
              "parentUUID": "1de5e7eb-5e7d-47f0-8740-146d3e63ad4f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Should Succefful Update Booking without ID",
              "fullTitle": "Update Booking Should Succefful Update Booking without ID",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await restfulApi.updateBooking(bookingId,data.Update_Booking);\nconsole.log(response.data)\nassert.equal(response.status, 405)\nexpect(response.data, \"Method Not Allowed\")",
              "err": {},
              "uuid": "36fe9d3f-f1b7-4e24-a4dd-0a05aaf224d1",
              "parentUUID": "1de5e7eb-5e7d-47f0-8740-146d3e63ad4f",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "df6dd005-aba8-4959-818c-fdd8c2d404c3",
            "c1da44f7-0267-4c3d-879e-be18eeda3b2e",
            "36fe9d3f-f1b7-4e24-a4dd-0a05aaf224d1"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 15000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "report"
      },
      "version": "6.2.0"
    }
  }
}